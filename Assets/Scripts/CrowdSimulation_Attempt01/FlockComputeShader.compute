// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Agent {
    float3 position;
    float3 direction;

    float3 flockHeading;
    float3 flockCenter;
    float3 seperationHeading;
    int numFlockmates;
};

RWStructuredBuffer<Agent> agents;
int numAgents;
float viewRadius;
float avoidRadius;

[numthreads(threadGroupSize, 1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (int indexB = 0; indexB < numAgents; indexB++)
    {
        Agent agentB = agents[indexB];
        float3 offset = agentB.position - agents[id.x].position;
        float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

        if (sqrDst < viewRadius * viewRadius) {
            agents[id.x].numFlockmates += 1;
            agents[id.x].flockHeading += agentB.direction;
            agents[id.x].flockCenter += agentB.position;

            if (sqrDst < avoidRadius * avoidRadius) {
                agents[id.x].seperationHeading -= offset / sqrDst;
            }
        }
    }
}
