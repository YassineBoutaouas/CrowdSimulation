// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
static const int threadGroupSize = 1024;

struct Agent
{
    float3 position;
    float3 direction;

    float3 flockCenter;
    float3 targetPosition;

    float3 acceleration;
};

RWStructuredBuffer<Agent> agents;
uint numAgents;

float viewRadius;
float avoidRadius;

float maxSpeed;
float maxSteerForce;

float alignWeight;
float cohesionWeight;
float separationWeight;

float3 SteerTowards(float3 velocity)
{
    float len = clamp(length(velocity), 0, maxSteerForce);

    return normalize(velocity) * len;
}

float WhenLessThan(float a, float b)
{
    return max(sign(b-a), 0.0);
}

int WhenEqual(uint a, int b)
{
    return 1 - abs(sign(b-a));
}

[numthreads(threadGroupSize, 1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    agents[id.x].acceleration = float3(0,0,0);
    agents[id.x].flockCenter = float3(0,0,0);

    int numFlockmates = 0;

    float3 flockHeading = float3(0,0,0);
    float3 separationHeading = float3(0,0,0);

    for (uint indexB = 0; indexB < numAgents; indexB++)
    {
        if(id.x != indexB)
        {
            Agent agentB = agents[indexB];
            float3 offset = agentB.position - agents[id.x].position;
            float sqrDst = offset.x * offset.x + offset.y * offset.y + offset.z * offset.z;

            //float inViewRadius = WhenLessThan(sqrDst, viewRadius * viewRadius);
            //float inAvoidanceRange = WhenLessThan(sqrDst, avoidRadius * avoidRadius);

            if (sqrDst < viewRadius * viewRadius)
            {
                numFlockmates += 1; //inViewRadius;
                flockHeading += agentB.direction;// * inViewRadius;
                agents[id.x].flockCenter += agentB.position;// * inViewRadius;

                if (sqrDst < (avoidRadius * avoidRadius)) {
                 separationHeading -= ((offset / sqrDst));// * inAvoidanceRange);
                }
            }
        }
    }

    //Calculate acceleration
    //In case path.length > 0 - targetPos = path[1]
    float3 offsetToTarget = agents[id.x].targetPosition - agents[id.x].position;

    agents[id.x].acceleration = SteerTowards(offsetToTarget);

    if(numFlockmates == 0) return;

    agents[id.x].flockCenter /= numFlockmates;

    float3 offsetToFlockCenter = (agents[id.x].flockCenter - agents[id.x].position);


    agents[id.x].acceleration += SteerTowards(flockHeading) * alignWeight + SteerTowards(offsetToFlockCenter) * cohesionWeight + SteerTowards(separationHeading) * separationWeight;
}